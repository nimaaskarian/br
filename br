#!/bin/sh
CONFIG_DIR=${XDG_CONFIG_HOME:-${HOME}/.config}/br


source_config() {
  config_file="$1"
  if [ -f "$config_file" ]; then
    . "$config_file"
  fi
}

make_gpg_cmd() {
    echo "$1" | sed "s+%i+\"$2\"+" | sed "s+%o+\"$3\"+"
}

edit_encrypted() {
  name=$(printf "%s" "$1" | sed 's+.gpg$++')
  SUFFIX=.$(echo "$JOURNAL_FORMAT" | sed 's/.*\.//')
  TMP=$(mktemp --suffix "$SUFFIX")
  
  if [ -f "$name.gpg" ]; then
    eval "$(make_gpg_cmd "$DECRYPT_CMD" "$TMP" "$name.gpg")"
  fi
  before=$(cat "$TMP")
  $EDITOR_ "$TMP"
  after=$(cat "$TMP")
  if ! [ "$before" = "$after" ]; then
    eval "$(make_gpg_cmd "$ENCRYPT_CMD" "$TMP" "$name.gpg")"
  fi
  $REMOVER "$TMP"
}

make_journal_path() {
  format=${JOURNAL_FORMAT}
  if [ "$notemode" = 1 ]; then
    format=${NOTE_FORMAT}
  fi

  name=$(echo "$format" | sed "s/%n/$1/" | sed "s+%d+$($DATE)+")
  echo "${VAULT}/$name"
}

make_vault() {
  VAULT=${1:-$VAULT}
  if [ "$notemode" = 1 ]; then
    VAULT=$VAULT/notes
  fi
  mkdir "$VAULT" 2> /dev/null
}

set_encrypted_editor() {
  EDITOR_=$EDITOR
  EDITOR=edit_encrypted
}

search_vault() {
  name=$(fd -tf -H --base-directory "$1" $2 | fzf --tac) || exit 1
  if echo "$name" | grep '.gpg$'; then
    ENCRYPTED=1
  fi
  FILE_PATH="$1/$name"
}

zip_vault() {
  zip -r "$1" "$VAULT"
}

sync_vault() {
  ip=$1
  rsync -acvu "$ip:$VAULT/" "$VAULT"
}

convert_file_to_doc() {
  pandoc "$2" -o "$1"
}

print() {
  printf "$*\n"
}

print_help() {
  print "Usage:"
  print "\tbr [OPTIONS] [VAULT_PATH]"
  print
  print "Arguments:"
  print "\t [VAULT_PATH] Path to vault directory"
  print
  print "Options:"
  print "\t-n <NOTE_NAME>"
  print "\t\tEdit note inside VAULT/notes/<NOTE_NAME>"
  print "\t-s"
  print "\t\tSearch and open journals and notes inside current vault"
  print "\t-j"
  print "\t\tSearch and open only journals inside current vault"
  print "\t-J"
  print "\t\tSearch and open only notes inside current vault"
  print "\t-l"
  print "\t\tUse PAGER (less) instead of EDITOR"
  print "\t-e"
  print "\t\tEdit journal/note as encrypted"
  print "\t-d"
  print "\t\tPrint the path of current vault"
  print "\t-S"
  print "\t\tSync br vault with IP"
  print "\t-c"
  print "\t\tLoad another config file (arguments will replace cli and config options up to that point)"
}

source_config "$CONFIG_DIR/brrc"
while getopts "z:hn:sS:ledjJp:c:" option; do
  case $option in 
    h) 
      print_help
      exit;;
    n) 
      notemode=1
      NAME=${OPTARG};;
    c) 
      source_config "${OPTARG}";;
    s)
      search_cmd="search_vault \$VAULT";;
    j)
      search_cmd="search_vault \$VAULT --max-depth=1";;
    J)
      search_cmd="search_vault \$VAULT/notes";;
    l) 
      EDITOR=${PAGER:-less};;
    e) 
      ENCRYPTED=1;;
    z) 
      zip_vault "${OPTARG}"
      exit;;
    S) 
      sync_vault "${OPTARG}"
      exit;;
    d) 
      echo "$VAULT"
      exit;;
    p) 
      EDITOR="convert_file_to_doc ${OPTARG}";;
    \?) 
      echo "Error: Invalid option"
      print_help
      exit 1;;
  esac
done
shift $((OPTIND - 1))
make_vault "$@"
[ "$search_cmd" ] && eval "$search_cmd"
FILE_PATH=${FILE_PATH:-$(make_journal_path "$NAME")}
if [ "$ENCRYPTED" = 1 ]; then
  set_encrypted_editor
fi

$EDITOR "$FILE_PATH"
