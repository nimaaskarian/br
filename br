#!/usr/bin/env bash
BR_ENCRYPTED=${BR_ENCRYPTED:-0}
BR_VAULT=${BR_VAULT:-"$HOME/Documents/br-vault"}
BR_DATE=${BR_DATE:-"date +%F"}
BR_ENCRYPT=${BR_ENCRYPT_CMD:-"gpg --symmetric --output %o %i"}
BR_DECRYPT=${BR_DECRYPT_CMD:-"gpg -d %o > %i"}
BR_REMOVER=${BR_REMOVER:-"rm"}
BR_ENCRYPTED_SUFFIX=${BR_ENCRYPTED_SUFFIX:-".gpg"}
BR_SUFFIX=${BR_SUFFIX:-".md"}

fatal() {
  1>&2 echo Error: "$@"
  exit 1
}

source_config() {
  config_file="$1"
  if [ -f "$config_file" ]; then
    . "$config_file"
  fi
}

make_gpg_cmd() {
  echo "$1" | sed "s+%i+\"$2\"+" | sed "s+%o+\"$3\"+"
}

rgfzf() {
  cd "$1" || return 1
  rg --color=always --line-number --no-heading --smart-case -v '^\s*$' \
  | fzf -d':' --ansi \
    --preview "bat -p --color=always {1} --highlight-line {2}" \
    --preview-window ~8,+{2}-5 \
  | awk -F':' '{print $1}'
}

edit_rgfzf() {
  name=$(rgfzf "$1") || exit 1
  BR_NAME="$name"
}

edit_encrypted() {
  name=$(printf "%s" "$1" | sed 's+.gpg$++')
  SUFFIX=".${name##*.}"
  TMP=$(mktemp --suffix "$SUFFIX")
  
  if [ -f "$name.gpg" ]; then
    eval "$(make_gpg_cmd "$BR_DECRYPT" "$TMP" "$name.gpg")"
  fi
  before=$(cat "$TMP")
  $EDITOR_ "$TMP"
  after=$(cat "$TMP")
  if ! [ "$before" = "$after" ]; then
    eval "$(make_gpg_cmd "$BR_ENCRYPT" "$TMP" "$name.gpg")"
  fi
  $BR_REMOVER "$TMP"
}

make_journal_path() {
  if [ "$BR_NAME" ] ; then
    if [ -d "$BR_VAULT/${BR_NAME}" ]; then
      BR_VAULT=$BR_VAULT/$BR_NAME
      BR_NAME=$($BR_DATE)$BR_SUFFIX
    fi
  else
    BR_NAME=$($BR_DATE)$BR_SUFFIX
  fi
  [[ "$BR_NAME" != *"$BR_SUFFIX" ]] && {
    BR_NAME=$BR_NAME$BR_SUFFIX
  }
  [ "$TAG" ] && {
    BR_NAME=""
  }

  dir="${BR_VAULT}/$(dirname "$BR_NAME")"
  if ! [ -d "$dir" ]; then
    mkdir -p "$dir"
  fi
}

set_encrypted_editor() {
  EDITOR_=$EDITOR
  EDITOR=edit_encrypted
}

search_vault() {
  name=$(fd -tf -tl -H --base-directory "$1" $2 | fzf --tac) || exit 1
  BR_NAME="$name"
}

convert_file_to_doc() {
  in=$2
  out=$1
  pandoc $PANDOC_OPTS "$in" -o "$out"
}

usage() {
  cat << EOF
Usage:
  br [OPTIONS] [COMMAND]

Arguments:
   [VAULT_PATH] Path to vault directory

Commands:
$(br lscmd)

Options:
  -n <NAME>
    Edit named journal
  -v <BR_VAULT> 
    use <BR_VAULT> as vault
  -l
    Use PAGER
  -g
    Use glow -p
  -e
    Edit journal/note as encrypted
  -d
    Set current date (passed as a --date argument to BR_DATE)
  -c
    Use cat as EDITOR
  -p
    Use "echo" as EDITOR (print the name of the file)
  -t
    Select a tag
  -a
    Echo path to all journals
EOF
}

while getopts "t:hn:lec:v:pgd:" option; do
  case $option in 
    h) 
      usage
      exit;;
    v)
      BR_VAULT=${OPTARG};;
    d)
      BR_DATE="$BR_DATE --date=${OPTARG}";;
    t)
      TAG=1
      BR_VAULT=$BR_VAULT/.tags/${OPTARG}
    ;;
    n) 
      BR_NAME=${OPTARG}
      ;;
    p)
      EDITOR="echo";;
    l) 
      EDITOR=${PAGER:-less};;
    g) 
      EDITOR="glow -p";;
    c) 
      EDITOR="cat";;
    e) 
      BR_ENCRYPTED=1;;
    \?) 
      fatal invalid option
  esac
done
make_journal_path
shift $((OPTIND - 1))
mkdir -p "$BR_VAULT" 2> /dev/null
if [ -n "$1" ]; then
  case $1 in 
    rg) 
      edit_rgfzf "$BR_VAULT";;
    search)
      search_vault "$BR_VAULT";;
    exec-batch)
      fd -tf -tl . --base-directory "$BR_VAULT" --color never --exec-batch "${@:2}"
      exit
    ;;
    ls)
      fd -td -tf . --base-directory "$BR_VAULT" --color never
      exit
    ;;
    edit)
      fd -tf -tl . "$BR_VAULT" --exec-batch $EDITOR
      exit
    ;;
    tag)
      [ -z "$2" ] && {
        fatal "tag requires at least an argument (a tag)"
      }
      for tag in "${@:2}"; do
        tagdir="$BR_VAULT/.tags/$tag"
        mkdir -p "$tagdir"
        ln -s "$BR_VAULT/$BR_NAME" "$tagdir"
      done
      exit
    ;;
    content)
      fd -tf -tl . "$BR_VAULT" --exec-batch cat
      exit
      ;;
    pandoc)
      [ -z "$2" ] && {
        fatal pandoc requires an argument
      }
      EDITOR="convert_file_to_doc $2"
      ;;
    init)
      mkdir -p "$BR_VAULT"/{projects,areas,resources,archives,diary,.tags}
      exit
      ;;
    zip)
      [ -z "$2" ] && {
        fatal zip requires an argument
      }
      zip -r "$2" "$BR_VAULT"
      exit
      ;;
    lscmd)
      cat << EOF
rg
search
exec-batch
ls
tag
edit
content
pandoc
zip
init
lscmd
EOF
exit
;;
  *)
    fatal command "\"$1\"" not found
  ;;
  esac
fi
if [ "$BR_ENCRYPTED" = 1 ] || [[ "$BR_NAME" = *"$BR_ENCRYPTED_SUFFIX" ]]; then
  set_encrypted_editor
fi

$EDITOR "$BR_VAULT/$BR_NAME"
