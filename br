#!/usr/bin/env bash
BR_ENCRYPTED=${BR_ENCRYPTED:-0}
BR_VAULT=${BR_VAULT:-"$HOME/Documents/br-vault"}
BR_DATE=${BR_DATE:-"date +%F"}
BR_ENCRYPT=${BR_ENCRYPT_CMD:-"gpg --symmetric --output %o %i"}
BR_DECRYPT=${BR_DECRYPT_CMD:-"gpg -d %o > %i"}
BR_REMOVER=${BR_REMOVER:-"rm"}

fatal() {
  1>&2 echo Error: "$@"
  exit 1
}

source_config() {
  config_file="$1"
  if [ -f "$config_file" ]; then
    . "$config_file"
  fi
}

make_gpg_cmd() {
  echo "$1" | sed "s+%i+\"$2\"+" | sed "s+%o+\"$3\"+"
}

rgfzf() {
  cd "$1" || return 1
  rg --color=always --line-number --no-heading --smart-case -v '^\s*$' \
  | fzf -d':' --ansi \
    --preview "bat -p --color=always {1} --highlight-line {2}" \
    --preview-window ~8,+{2}-5 \
  | awk -F':' '{print $1}'
}

edit_rgfzf() {
  vault=$1
  name=$(rgfzf "$vault")
  ! [ "$name" ] && exit 1
  resolve_name "$vault" "$name"
}

edit_encrypted() {
  name=$(printf "%s" "$1" | sed 's+.gpg$++')
  SUFFIX=".${name##*.}"
  TMP=$(mktemp --suffix "$SUFFIX")
  
  if [ -f "$name.gpg" ]; then
    eval "$(make_gpg_cmd "$BR_DECRYPT" "$TMP" "$name.gpg")"
  fi
  before=$(cat "$TMP")
  $EDITOR_ "$TMP"
  after=$(cat "$TMP")
  if ! [ "$before" = "$after" ]; then
    eval "$(make_gpg_cmd "$BR_ENCRYPT" "$TMP" "$name.gpg")"
  fi
  $BR_REMOVER "$TMP"
}

make_journal_path() {
  if [ "$BR_NAME" ] ; then
    if [ -d "$BR_VAULT/${BR_NAME}" ]; then
      BR_VAULT=$BR_VAULT/$BR_NAME
      BR_NAME=$($BR_DATE)
    fi
  else
    BR_NAME=$($BR_DATE)
  fi
  BR_NAME=$BR_NAME.md

  dir="${BR_VAULT}/$(dirname "$BR_NAME")"
  if ! [ -d "$dir" ]; then
    mkdir -p "$dir"
  fi
}

set_encrypted_editor() {
  EDITOR_=$EDITOR
  EDITOR=edit_encrypted
}

search_vault() {
  name=$(fd -tf -H --base-directory "$1" $2 | fzf --tac) || exit 1
  resolve_name "$1" "$name"
}

resolve_name()  {
  name=$2
  if echo "$name" | grep '.gpg$'; then
    BR_ENCRYPTED=1
  fi
  BR_VAULT=$1
  BR_NAME=$name
}

zip_vault() {
  zip -r "$1" "$BR_VAULT"
}

convert_file_to_doc() {
  in=$2
  out=$1
  pandoc $PANDOC_OPTS "$in" -o "$out"
}

usage() {
  cat << EOF
Usage:
  br [OPTIONS] [COMMAND]

Arguments:
   [VAULT_PATH] Path to vault directory

Commands:
$(br lscmd)

Options:
  -n <NAME>
    Edit named journal
  -v <BR_VAULT> 
    use <BR_VAULT> as vault
  -l
    Use PAGER
  -g
    Use glow -p
  -e
    Edit journal/note as encrypted
  -d
    Print the path of current vault
  -D
    Print the path of selected file
  -c
    Use cat as EDITOR
  -p
    Use "echo" as EDITOR (print the name of the file)
  -t
    Search journals and notes by text inside them
  -a
    Echo path to all journals
EOF
}

while getopts ":hn:lec:v:pg" option; do
  case $option in 
    h) 
      usage
      exit;;
    v)
      BR_VAULT=${OPTARG};;
    n) 
      BR_NAME=${OPTARG}
      ;;
    p)
      EDITOR="echo";;
    l) 
      EDITOR=${PAGER:-less};;
    g) 
      EDITOR="glow -p";;
    c) 
      EDITOR="cat";;
    e) 
      BR_ENCRYPTED=1;;
    \?) 
      fatal invalid option
  esac
done
make_journal_path
shift $((OPTIND - 1))
mkdir -p "$BR_VAULT" 2> /dev/null
if [ -n "$1" ]; then
  case $1 in 
    rg) 
      edit_rgfzf "$BR_VAULT";;
    search)
      search_vault "$BR_VAULT";;
    content)
      fd -tf -e md . "$BR_VAULT" --exec cat
      exit
      ;;
    pandoc) 
      [ -z "$2" ] && {
        fatal pandoc requires an argument
      }
      EDITOR="convert_file_to_doc $2"
      ;;
    parad)
      mkdir "$BR_VAULT"/{projects,areas,resources,archives,diary}
      exit
      ;;
    zip)
      [ -z "$2" ] && {
        fatal zip requires an argument
      }
      zip_vault "$2"
      exit
      ;;
    lscmd)
      cat << EOF
rg
search
ls
content
pandoc
zip
parad
lscmd
EOF
exit
;;
  esac
fi
if [ "$BR_ENCRYPTED" = 1 ]; then
  set_encrypted_editor
fi

$EDITOR "$BR_VAULT/$BR_NAME"
